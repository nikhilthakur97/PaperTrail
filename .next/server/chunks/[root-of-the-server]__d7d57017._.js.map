{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/nikhil/Downloads/PaperTrail%20/app/database/schema.ts"],"sourcesContent":["import { pgTable, text, timestamp, integer, jsonb, boolean, pgEnum, index, primaryKey } from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\nimport type { AdapterAccount } from 'next-auth/adapters';\n\n// ===========================\n// ENUMS\n// ===========================\n\nexport const roleEnum = pgEnum('role', ['user', 'assistant', 'system']);\nexport const sourceTypeEnum = pgEnum('source_type', ['pubmed', 'arxiv', 'upload']);\nexport const jobStatusEnum = pgEnum('job_status', ['pending', 'processing', 'completed', 'failed']);\nexport const jobTypeEnum = pgEnum('job_type', ['ingestion', 'pdf_generation', 'embedding', 'artifact_creation']);\nexport const embeddingStatusEnum = pgEnum('embedding_status', ['pending', 'processing', 'completed', 'failed']);\n\n// ===========================\n// AUTHENTICATION TABLES (NextAuth)\n// ===========================\n\n/**\n * Users table - stores user profiles\n * Supports both email/password and OAuth (Google) login\n */\nexport const users = pgTable('users', {\n  id: text('id').primaryKey().$defaultFn(() => crypto.randomUUID()),\n  name: text('name'),\n  email: text('email').unique(),\n  emailVerified: timestamp('emailVerified', { mode: 'date' }),\n  image: text('image'),\n  // Password hash only for email/password users (null for OAuth-only)\n  passwordHash: text('password_hash'),\n  createdAt: timestamp('created_at', { mode: 'date' }).defaultNow().notNull(),\n  updatedAt: timestamp('updated_at', { mode: 'date' }).defaultNow().notNull(),\n});\n\n/**\n * Accounts table - links users to OAuth providers\n * One user can have multiple accounts (Google + credentials)\n */\nexport const accounts = pgTable('accounts', {\n  userId: text('userId')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  type: text('type').$type<AdapterAccount['type']>().notNull(),\n  provider: text('provider').notNull(),\n  providerAccountId: text('providerAccountId').notNull(),\n  refresh_token: text('refresh_token'),\n  access_token: text('access_token'),\n  expires_at: integer('expires_at'),\n  token_type: text('token_type'),\n  scope: text('scope'),\n  id_token: text('id_token'),\n  session_state: text('session_state'),\n}, (account) => ({\n  compoundKey: primaryKey({\n    columns: [account.provider, account.providerAccountId],\n  }),\n}));\n\n/**\n * Sessions table - tracks active user sessions\n * Optional with JWT strategy but useful for session management\n */\nexport const sessions = pgTable('sessions', {\n  sessionToken: text('sessionToken').primaryKey(),\n  userId: text('userId')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  expires: timestamp('expires', { mode: 'date' }).notNull(),\n});\n\n/**\n * Verification tokens - for email verification\n */\nexport const verificationTokens = pgTable('verificationToken', {\n  identifier: text('identifier').notNull(),\n  token: text('token').notNull(),\n  expires: timestamp('expires', { mode: 'date' }).notNull(),\n}, (vt) => ({\n  compoundKey: primaryKey({ columns: [vt.identifier, vt.token] }),\n}));\n\n// ===========================\n// APPLICATION TABLES\n// ===========================\n\n/**\n * Threads table - conversation sessions\n * Each thread contains multiple messages\n */\nexport const threads = pgTable('threads', {\n  id: text('id').primaryKey().$defaultFn(() => crypto.randomUUID()),\n  userId: text('user_id')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  // Title auto-generated from first message or user-provided\n  title: text('title').notNull(),\n  createdAt: timestamp('created_at', { mode: 'date' }).defaultNow().notNull(),\n  updatedAt: timestamp('updated_at', { mode: 'date' }).defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index('threads_user_id_idx').on(table.userId),\n}));\n\n/**\n * Messages table - individual chat messages\n * Stores both user prompts and AI responses\n */\nexport const messages = pgTable('messages', {\n  id: text('id').primaryKey().$defaultFn(() => crypto.randomUUID()),\n  threadId: text('thread_id')\n    .notNull()\n    .references(() => threads.id, { onDelete: 'cascade' }),\n  role: roleEnum('role').notNull(),\n  content: text('content').notNull(),\n  // Metadata: { citations: [...], artifacts: [...], streaming_complete: boolean }\n  metadata: jsonb('metadata'),\n  createdAt: timestamp('created_at', { mode: 'date' }).defaultNow().notNull(),\n}, (table) => ({\n  threadIdIdx: index('messages_thread_id_idx').on(table.threadId),\n}));\n\n/**\n * Documents table - source materials\n * Tracks PubMed articles, arXiv papers, and user uploads\n */\nexport const documents = pgTable('documents', {\n  id: text('id').primaryKey().$defaultFn(() => crypto.randomUUID()),\n  sourceType: sourceTypeEnum('source_type').notNull(),\n  // External IDs: PMID, PMC ID, arXiv ID, or null for uploads\n  externalId: text('external_id'),\n  // Document metadata\n  title: text('title').notNull(),\n  authors: text('authors'), // JSON array or comma-separated\n  year: integer('year'),\n  abstract: text('abstract'),\n  doi: text('doi'),\n  url: text('url'),\n  // File storage\n  filePath: text('file_path'), // Path in MinIO\n  fileType: text('file_type'), // pdf, txt, md\n  // Licensing and permissions\n  license: text('license'), // open-access, restricted, etc.\n  canRedistribute: boolean('can_redistribute').default(false),\n  // Processing status\n  embeddingStatus: embeddingStatusEnum('embedding_status').default('pending'),\n  // If uploaded by user, track which thread\n  uploadedByUserId: text('uploaded_by_user_id').references(() => users.id, { onDelete: 'set null' }),\n  uploadedInThreadId: text('uploaded_in_thread_id').references(() => threads.id, { onDelete: 'set null' }),\n  // Metadata for chunking/embedding\n  metadata: jsonb('metadata'), // { chunk_count, embedding_model, etc. }\n  createdAt: timestamp('created_at', { mode: 'date' }).defaultNow().notNull(),\n  updatedAt: timestamp('updated_at', { mode: 'date' }).defaultNow().notNull(),\n}, (table) => ({\n  externalIdIdx: index('documents_external_id_idx').on(table.externalId),\n  sourceTypeIdx: index('documents_source_type_idx').on(table.sourceType),\n  embeddingStatusIdx: index('documents_embedding_status_idx').on(table.embeddingStatus),\n}));\n\n/**\n * Message Citations - junction table linking messages to source documents\n */\nexport const messageCitations = pgTable('message_citations', {\n  id: text('id').primaryKey().$defaultFn(() => crypto.randomUUID()),\n  messageId: text('message_id')\n    .notNull()\n    .references(() => messages.id, { onDelete: 'cascade' }),\n  documentId: text('document_id')\n    .notNull()\n    .references(() => documents.id, { onDelete: 'cascade' }),\n  // Relevance score from retrieval\n  relevanceScore: integer('relevance_score'),\n  // Which chunk was cited\n  chunkIndex: integer('chunk_index'),\n  createdAt: timestamp('created_at', { mode: 'date' }).defaultNow().notNull(),\n}, (table) => ({\n  messageIdIdx: index('message_citations_message_id_idx').on(table.messageId),\n  documentIdIdx: index('message_citations_document_id_idx').on(table.documentId),\n}));\n\n/**\n * Jobs table - background task tracking\n * Used for ingestion, PDF generation, embeddings, etc.\n */\nexport const jobs = pgTable('jobs', {\n  id: text('id').primaryKey().$defaultFn(() => crypto.randomUUID()),\n  type: jobTypeEnum('type').notNull(),\n  status: jobStatusEnum('status').default('pending').notNull(),\n  // Input parameters as JSON\n  payload: jsonb('payload'),\n  // Output/results as JSON (file paths, stats, etc.)\n  result: jsonb('result'),\n  // Error message if failed\n  error: text('error'),\n  // Progress tracking (0-100)\n  progress: integer('progress').default(0),\n  // Optional: link to user who triggered job\n  triggeredByUserId: text('triggered_by_user_id').references(() => users.id, { onDelete: 'set null' }),\n  createdAt: timestamp('created_at', { mode: 'date' }).defaultNow().notNull(),\n  startedAt: timestamp('started_at', { mode: 'date' }),\n  completedAt: timestamp('completed_at', { mode: 'date' }),\n}, (table) => ({\n  statusIdx: index('jobs_status_idx').on(table.status),\n  typeIdx: index('jobs_type_idx').on(table.type),\n}));\n\n// ===========================\n// RELATIONS (for Drizzle queries)\n// ===========================\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  accounts: many(accounts),\n  sessions: many(sessions),\n  threads: many(threads),\n  uploadedDocuments: many(documents),\n}));\n\nexport const accountsRelations = relations(accounts, ({ one }) => ({\n  user: one(users, {\n    fields: [accounts.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const sessionsRelations = relations(sessions, ({ one }) => ({\n  user: one(users, {\n    fields: [sessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const threadsRelations = relations(threads, ({ one, many }) => ({\n  user: one(users, {\n    fields: [threads.userId],\n    references: [users.id],\n  }),\n  messages: many(messages),\n}));\n\nexport const messagesRelations = relations(messages, ({ one, many }) => ({\n  thread: one(threads, {\n    fields: [messages.threadId],\n    references: [threads.id],\n  }),\n  citations: many(messageCitations),\n}));\n\nexport const documentsRelations = relations(documents, ({ one, many }) => ({\n  uploadedBy: one(users, {\n    fields: [documents.uploadedByUserId],\n    references: [users.id],\n  }),\n  uploadedInThread: one(threads, {\n    fields: [documents.uploadedInThreadId],\n    references: [threads.id],\n  }),\n  citations: many(messageCitations),\n}));\n\nexport const messageCitationsRelations = relations(messageCitations, ({ one }) => ({\n  message: one(messages, {\n    fields: [messageCitations.messageId],\n    references: [messages.id],\n  }),\n  document: one(documents, {\n    fields: [messageCitations.documentId],\n    references: [documents.id],\n  }),\n}));\n\nexport const jobsRelations = relations(jobs, ({ one }) => ({\n  triggeredBy: one(users, {\n    fields: [jobs.triggeredByUserId],\n    references: [users.id],\n  }),\n}));\n\n// ===========================\n// TYPE EXPORTS (for TypeScript)\n// ===========================\n\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\n\nexport type Thread = typeof threads.$inferSelect;\nexport type NewThread = typeof threads.$inferInsert;\n\nexport type Message = typeof messages.$inferSelect;\nexport type NewMessage = typeof messages.$inferInsert;\n\nexport type Document = typeof documents.$inferSelect;\nexport type NewDocument = typeof documents.$inferInsert;\n\nexport type MessageCitation = typeof messageCitations.$inferSelect;\nexport type NewMessageCitation = typeof messageCitations.$inferInsert;\n\nexport type Job = typeof jobs.$inferSelect;\nexport type NewJob = typeof jobs.$inferInsert;\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":["file:///Users/nikhil/Downloads/PaperTrail%20/app/database/db-server.ts"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport * as schema from './schema';\n\n// Initialize Neon serverless connection\nconst sql = neon(process.env.DATABASE_URL!);\n\n// Create Drizzle instance with schema for relational queries\nexport const db = drizzle({ client: sql, schema });\n\n// Export schema for NextAuth adapter and type inference\nexport { schema };\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,wCAAwC;AACxC,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;AAGlC,MAAM,KAAK,IAAA,qKAAO,EAAC;IAAE,QAAQ;IAAK,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":["file:///Users/nikhil/Downloads/PaperTrail%20/app/lib/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { DrizzleAdapter } from \"@auth/drizzle-adapter\";\nimport { db } from \"@/app/database/db-server\";\nimport { users, accounts, sessions, verificationTokens } from \"@/app/database/schema\";\nimport { eq } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  adapter: DrizzleAdapter(db, {\n    usersTable: users,\n    accountsTable: accounts,\n    sessionsTable: sessions,\n    verificationTokensTable: verificationTokens,\n  }),\n  trustHost: true, // Trust host for development (localhost)\n  session: {\n    strategy: \"jwt\", // Using JWT for sessions (faster, stateless)\n  },\n  pages: {\n    signIn: \"/login\", // Custom login page\n  },\n  providers: [\n    // Google OAuth Provider\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      allowDangerousEmailAccountLinking: true, // Allow linking Google to existing email\n    }),\n\n    // Email/Password Credentials Provider\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error(\"Missing email or password\");\n        }\n\n        // Find user by email\n        const user = await db\n          .select()\n          .from(users)\n          .where(eq(users.email, credentials.email as string))\n          .limit(1);\n\n        if (!user || user.length === 0) {\n          throw new Error(\"No user found with this email\");\n        }\n\n        const dbUser = user[0];\n\n        // Check if user has a password (not OAuth-only)\n        if (!dbUser.passwordHash) {\n          throw new Error(\"Please sign in with Google\");\n        }\n\n        // Verify password\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password as string,\n          dbUser.passwordHash\n        );\n\n        if (!isPasswordValid) {\n          throw new Error(\"Invalid password\");\n        }\n\n        // Return user object (will be encoded in JWT)\n        return {\n          id: dbUser.id,\n          email: dbUser.email,\n          name: dbUser.name,\n          image: dbUser.image,\n        };\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      // Add user ID to token on sign in\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      // Add user ID to session\n      if (session.user) {\n        session.user.id = token.id as string;\n      }\n      return session;\n    },\n  },\n});\n\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAEO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAA,kKAAQ,EAAC;IAC1D,SAAS,IAAA,yKAAc,EAAC,uJAAE,EAAE;QAC1B,YAAY,oIAAK;QACjB,eAAe,uIAAQ;QACvB,eAAe,uIAAQ;QACvB,yBAAyB,iJAAkB;IAC7C;IACA,WAAW;IACX,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,wBAAwB;QACxB,IAAA,kKAAc,EAAC;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,mCAAmC;QACrC;QAEA,sCAAsC;QACtC,IAAA,uKAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,qBAAqB;gBACrB,MAAM,OAAO,MAAM,uJAAE,CAClB,MAAM,GACN,IAAI,CAAC,oIAAK,EACV,KAAK,CAAC,IAAA,0KAAE,EAAC,oIAAK,CAAC,KAAK,EAAE,YAAY,KAAK,GACvC,KAAK,CAAC;gBAET,IAAI,CAAC,QAAQ,KAAK,MAAM,KAAK,GAAG;oBAC9B,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,SAAS,IAAI,CAAC,EAAE;gBAEtB,gDAAgD;gBAChD,IAAI,CAAC,OAAO,YAAY,EAAE;oBACxB,MAAM,IAAI,MAAM;gBAClB;gBAEA,kBAAkB;gBAClB,MAAM,kBAAkB,MAAM,8IAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,OAAO,YAAY;gBAGrB,IAAI,CAAC,iBAAiB;oBACpB,MAAM,IAAI,MAAM;gBAClB;gBAEA,8CAA8C;gBAC9C,OAAO;oBACL,IAAI,OAAO,EAAE;oBACb,OAAO,OAAO,KAAK;oBACnB,MAAM,OAAO,IAAI;oBACjB,OAAO,OAAO,KAAK;gBACrB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,kCAAkC;YAClC,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,yBAAyB;YACzB,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 560, "column": 0}, "map": {"version":3,"sources":["file:///Users/nikhil/Downloads/PaperTrail%20/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { handlers } from \"@/app/lib/auth\";\n\nexport const { GET, POST } = handlers;\n\n"],"names":[],"mappings":";;;;;;AAAA;;AAEO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,gIAAQ","debugId":null}}]
}